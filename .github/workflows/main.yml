name: Deploying an app
on:
    workflow_dispatch:
    push:
        branches: [ "dev" , "main"]
jobs:
    dev:
        runs-on: ubuntu-latest
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            HOSTNAME: ${{secrets.SSH_HOST}}
            USER_NAME: ${{secrets.USER_NAME}}
            AWS_DEFAULT_REGION: us-east-1
        
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Setup AWS CLI Credentials
              run: |
                aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                aws configure set aws_session_token $AWS_SESSION_TOKEN

            - name: Install AWS CLI
              run: |
                sudo apt-get update
                sudo apt-get install -y awscli

            # - name: Create S3 bucket
            #   run: |
            #     aws s3api create-bucket --bucket intern-ujwal-docker
        
            # - name: Delete existing resources in S3 bucket
            #   run: |
            #     aws s3 rm s3://intern-ujwal-docker --recursive
        
            # - name: Upload to S3
            #   run: |
            #     aws s3 sync ansible s3://intern-ujwal-docker --delete

            # - name: Install Docker Compose
            #   run: |
            #     DOCKER_COMPOSE_VERSION=1.29.2
            #     sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            #     sudo chmod +x /usr/local/bin/docker-compose
            #     docker-compose --version

            # - name: Login Docker
            #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ujwalbudha --password-stdin

            # - name: Login to ECR
            #   run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "${{ secrets.AWS_USER_ID }}".dkr.ecr.us-east-1.amazonaws.com

            # - name: Build Docker Image
            #   run: |
            #     docker-compose build 

            # - name: Upload the docker_frontend_container image to ECR
            #   run: |
            #    docker tag application_deployment_using_docker_github-action_frontend "${{ secrets.AWS_USER_ID }}".dkr.ecr.us-east-1.amazonaws.com/testujwal001:frontend
            #    docker push "${{ secrets.AWS_USER_ID }}".dkr.ecr.us-east-1.amazonaws.com/testujwal001:frontend
               

            # - name: Upload the docker_backend_container image to ECR
            #   run: |
            #    docker tag application_deployment_using_docker_github-action_backend "${{ secrets.AWS_USER_ID }}".dkr.ecr.us-east-1.amazonaws.com/testujwal001:backend
            #    docker push "${{ secrets.AWS_USER_ID }}".dkr.ecr.us-east-1.amazonaws.com/testujwal001:backend       
           
            # - name: Terraform Init
            #   run: |
            #      cd terraform
            #      terraform init
       
            # - name: Terraform plan
            #   run: |
            #     cd terraform
            #     terraform plan -var-file=dev.tfvars
       
            # - name: Terraform apply
            #   run: |
            #     cd terraform
            #     terraform apply -var-file=dev.tfvars -auto-approve


            

            # - name: Configuring aws-cli
            #   run: |
            #     echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
            #     ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
            #     aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            #     aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            #     aws configure set aws_session_token $AWS_SESSION_TOKEN
            #     '


            

            - uses: actions/checkout@v2 
            - name: Build & Deploy
              env:
                  PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
                  HOSTNAME: ${{secrets.SSH_HOST}}
                  USER_NAME: ${{secrets.USER_NAME}}
      
              run: |
                echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
                ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
      
                    # Now we have got the access of EC2 and we will start the deploy .
                    cd /home/ubuntu/<PROJECT_DIRECTORY> &&
                    git checkout dev &&
                    git fetch --all &&
                    git reset --hard origin/dev &&
                    git pull origin dev &&
                    sudo npm i &&
                    sudo npm run build &&
                    sudo pm2 stop ./dist/index.js &&
                    sudo pm2 start ./dist/index.js
                    '